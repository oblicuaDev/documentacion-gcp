"use strict";(globalThis.webpackChunkbilly_gcp=globalThis.webpackChunkbilly_gcp||[]).push([[3989],{4212:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"funciones/process-and-send-message","title":"\ud83e\udd16 process-and-send-message (L\xf3gica Central de Env\xedo)","description":"Esta funci\xf3n Cloud Run es el Handler Final del Billy-workflow y el componente m\xe1s complejo de la arquitectura. Su rol es orquestar la Inteligencia Artificial (OpenAI) para generar el mensaje, seleccionar el canal de env\xedo multi-tono (Email, SMS, WhatsApp) y registrar la acci\xf3n en el sistema de analytics de Billy.","source":"@site/docs/funciones/process-and-send-message.md","sourceDirName":"funciones","slug":"/funciones/process-and-send-message","permalink":"/documentacion-gcp/docs/funciones/process-and-send-message","draft":false,"unlisted":false,"editUrl":"https://github.com/oblicuaDev/documentacion-gcp/tree/main/docs/funciones/process-and-send-message.md","tags":[],"version":"current","frontMatter":{"id":"process-and-send-message","title":"\ud83e\udd16 process-and-send-message (L\xf3gica Central de Env\xedo)","sidebar_label":"Procesar y Enviar"},"sidebar":"billyGcpSidebar","previous":{"title":"Punto de Ingesta","permalink":"/documentacion-gcp/docs/funciones/ingest-task-from-billy"},"next":{"title":"Guardar Credenciales","permalink":"/documentacion-gcp/docs/funciones/save-user-credentials"}}');var s=a(4848),o=a(8453);const i={id:"process-and-send-message",title:"\ud83e\udd16 process-and-send-message (L\xf3gica Central de Env\xedo)",sidebar_label:"Procesar y Enviar"},l="Funci\xf3n process-and-send-message",r={},c=[{value:"1. Detalles de Despliegue",id:"1-detalles-de-despliegue",level:2},{value:"2. Flujo de Procesamiento y L\xf3gica de Negocio",id:"2-flujo-de-procesamiento-y-l\xf3gica-de-negocio",level:2},{value:"A. L\xf3gica de Tono y Canal",id:"a-l\xf3gica-de-tono-y-canal",level:3},{value:"B. Registro de la Acci\xf3n",id:"b-registro-de-la-acci\xf3n",level:3},{value:"3. C\xf3digo Fuente (Node.js)",id:"3-c\xf3digo-fuente-nodejs",level:2},{value:"4. Esquema de Salida de OpenAI (Referencia)",id:"4-esquema-de-salida-de-openai-referencia",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"funci\xf3n-process-and-send-message",children:["Funci\xf3n ",(0,s.jsx)(n.code,{children:"process-and-send-message"})]})}),"\n",(0,s.jsxs)(n.p,{children:["Esta funci\xf3n Cloud Run es el ",(0,s.jsx)(n.strong,{children:"Handler Final"})," del ",(0,s.jsx)(n.code,{children:"Billy-workflow"})," y el componente m\xe1s complejo de la arquitectura. Su rol es orquestar la ",(0,s.jsx)(n.strong,{children:"Inteligencia Artificial (OpenAI)"})," para generar el mensaje, seleccionar el canal de env\xedo ",(0,s.jsx)(n.strong,{children:"multi-tono"})," (Email, SMS, WhatsApp) y registrar la acci\xf3n en el sistema de ",(0,s.jsx)(n.em,{children:"analytics"})," de Billy."]}),"\n",(0,s.jsx)(n.h2,{id:"1-detalles-de-despliegue",children:"1. Detalles de Despliegue"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Propiedad"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Valor"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Observaciones"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Tipo"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Cloud Run Service (Node.js)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Funci\xf3n HTTP invocada por el loop del Workflow."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Regi\xf3n GCP"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"northamerica-south1"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["Mismo ",(0,s.jsx)(n.em,{children:"datacenter"})," que el Workflow."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"URL de Invocaci\xf3n"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"https://process-and-send-message-985640295677.northamerica-south1.run.app"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.strong,{children:"Endpoint privado"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Autenticaci\xf3n"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["Requiere ",(0,s.jsx)(n.strong,{children:"IAM"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["Solo invocable por la Cuenta de Servicio del ",(0,s.jsx)(n.code,{children:"Billy-workflow"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Dependencias Externas"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"OpenAI (GPT & Asistente), Meta/WhatsApp API, Campaign Monitor, sms.to."})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Se requiere un amplio acceso a m\xfaltiples APIs de terceros."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"2-flujo-de-procesamiento-y-l\xf3gica-de-negocio",children:"2. Flujo de Procesamiento y L\xf3gica de Negocio"}),"\n",(0,s.jsxs)(n.p,{children:["El flujo central ahora incluye una ",(0,s.jsx)(n.strong,{children:"l\xf3gica de ramificaci\xf3n avanzada"})," para WhatsApp basada en el tono de cobro:"]}),"\n",(0,s.jsx)(n.h3,{id:"a-l\xf3gica-de-tono-y-canal",children:"A. L\xf3gica de Tono y Canal"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filtro Inicial:"})," Se omite si no hay d\xedas en mora o monto."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generaci\xf3n de Mensaje (OpenAI):"})," El Asistente de OpenAI determina el ",(0,s.jsxs)(n.strong,{children:["canal (",(0,s.jsx)(n.code,{children:"type"}),")"]})," y el ",(0,s.jsxs)(n.strong,{children:["tono (",(0,s.jsx)(n.code,{children:"tone"}),")"]})," de la comunicaci\xf3n. El output incluye un JSON con ",(0,s.jsx)(n.code,{children:"type"}),", ",(0,s.jsx)(n.code,{children:"subject"}),", ",(0,s.jsx)(n.code,{children:"msg"}),", ",(0,s.jsx)(n.code,{children:"amount"}),", y ",(0,s.jsx)(n.code,{children:"tone"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"EMAIL / TEMPLATE:"})," Usa Campaign Monitor. Permite usar el contenido generado por IA (",(0,s.jsx)(n.code,{children:"EMAIL"}),") o una plantilla HTML predefinida (",(0,s.jsx)(n.code,{children:"TEMPLATE"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SMS:"})," Usa la funci\xf3n ",(0,s.jsx)(n.code,{children:"shortenForSms"})," (llamada a GPT-3.5-turbo) para garantizar que el mensaje no exceda los 160 caracteres antes de enviarlo por la API de ",(0,s.jsx)(n.code,{children:"sms.to"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WHATSAPP:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Utiliza el token y las plantillas de la API de Meta, extra\xeddas de Secret Manager."}),"\n",(0,s.jsxs)(n.li,{children:["La l\xf3gica selecciona la plantilla correcta (",(0,s.jsx)(n.code,{children:"exigente"}),", ",(0,s.jsx)(n.code,{children:"formal"}),", ",(0,s.jsx)(n.code,{children:"amistoso"}),") bas\xe1ndose en el campo ",(0,s.jsx)(n.code,{children:"tone"})," devuelto por la IA."]}),"\n",(0,s.jsxs)(n.li,{children:["Incluye una ",(0,s.jsx)(n.strong,{children:"l\xf3gica especial para el usuario 20 (SOS Jur\xeddico)"}),", utilizando tokens y plantillas espec\xedficos para ese flujo."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"b-registro-de-la-acci\xf3n",children:"B. Registro de la Acci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Se utiliza la funci\xf3n ",(0,s.jsx)(n.code,{children:"buildBillyPayload"})," para estandarizar el registro con los campos ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"etapa"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"due_date"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"days_outstanding"})}),", y el ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"channel"})})," adecuado (",(0,s.jsx)(n.code,{children:"channelId: 1"})," para Email, ",(0,s.jsx)(n.code,{children:"2"})," para SMS, ",(0,s.jsx)(n.code,{children:"3"})," para WhatsApp)."]}),"\n",(0,s.jsxs)(n.li,{children:["La acci\xf3n se registra en la API de Billy ",(0,s.jsx)(n.strong,{children:"solo si no es un modo de prueba"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-c\xf3digo-fuente-nodejs",children:"3. C\xf3digo Fuente (Node.js)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:"const functions = require('@google-cloud/functions-framework');\nconst { SecretManagerServiceClient } = require('@google-cloud/secret-manager');\nconst OpenAI = require('openai');\nconst axios = require('axios');\n\nconst secretClient = new SecretManagerServiceClient();\nlet openai;\n\n// --- Funciones Auxiliares ---\n\n/**\n * Obtiene todas las claves de API y plantillas de texto necesarias desde Secret Manager.\n * (Actualizada para incluir las 5 claves/plantillas de WhatsApp)\n * @returns {Promise<object>} Un objeto con todas las claves y plantillas.\n */\nasync function getApiKeys() {\n    const [openaiKey] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/openai-api-key/versions/latest' });\n    const [campaignKey] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/campaign-monitor-api-key/versions/latest' });\n    const [smsKey] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/smsto-api-key/versions/latest' });\n    const [billyToken] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/billy-api-token/versions/latest' });\n    const [whatsappToken] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/whatsapp-api-token/versions/latest' });\n    const [whatsappSosToken] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/whatsapp-billy-sos-api-token/versions/latest' });\n    const [whatsappTemplateExigente] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/whatsapp-template-exigente/versions/latest' });\n    const [whatsappTemplateFormal] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/whatsapp-template-formal/versions/latest' });\n    const [whatsappTemplateAmistoso] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/whatsapp-template-amistoso/versions/latest' });\n    const [whatsappTemplateSos] = await secretClient.accessSecretVersion({ name: 'projects/billy-473802/secrets/whatsapp-template-sos-juridico/versions/latest' });\n\n    openai = new OpenAI({ apiKey: openaiKey.payload.data.toString('utf8') });\n    return {\n        campaignKey: campaignKey.payload.data.toString('utf8'),\n        smsKey: smsKey.payload.data.toString('utf8'),\n        billyToken: billyToken.payload.data.toString('utf8'),\n        whatsappToken: whatsappToken.payload.data.toString('utf8'),\n        whatsappSosToken: whatsappSosToken.payload.data.toString('utf8'),\n        whatsappTemplateExigente: whatsappTemplateExigente.payload.data.toString('utf8'),\n        whatsappTemplateFormal: whatsappTemplateFormal.payload.data.toString('utf8'),\n        whatsappTemplateAmistoso: whatsappTemplateAmistoso.payload.data.toString('utf8'),\n        whatsappTemplateSos: whatsappTemplateSos.payload.data.toString('utf8')\n    };\n}\n\n/**\n * Construye el prompt para el Asistente de OpenAI con los datos de la factura.\n */\nfunction buildPrompt(invoice, config) {\n    const getVal = (value, fallback) => value || fallback;\n    return `Crea un mensaje de cobranza para esta factura:\n- Empresa que cobra: ${getVal(invoice.Cobrador_si_Grupo_Oblicua_SAS_no_es_el_cobrador_final, config.razon_social)}\n- Link de pago: ${getVal(config.link_pago, \"No hay Link de pago\")}\n- Cliente deudor: ${getVal(invoice.Raz\xf3n_social_cliente, '')}\n- \xbfEl cliente deudor es empresa?: ${config.client_type}\n- Numero de la factura: ${getVal(invoice['No._Factura'], \"No tener en cuenta n\xfamero de factura en el mensaje\")}\n- Fecha en que venci\xf3 la factura: ${getVal(invoice.Fecha_de_vencimiento, \"No tener en cuenta fecha de vencimiento de factura en el mensaje\")}\n- D\xedas en mora de la factura: ${getVal(invoice.D\xedas_en_Mora, \"No tener en cuenta d\xedas en mora de factura en el mensaje\")}\n- Monto de la factura: ${getVal(invoice.Monto, \"No tener en cuenta monto de la factura en el mensaje\")}\n- Objeto JSON para definir el tono y el canal del mensaje: ${JSON.stringify(config.tonos)}\n- La fecha actual es: ${new Date().toISOString()}\n- Esta factura ya est\xe1 vencida. `;\n}\n\n/**\n * Llama al Asistente de OpenAI y espera su respuesta en formato JSON.\n */\nasync function callAssistant(prompt, assistantId) {\n    const thread = await openai.beta.threads.create();\n    await openai.beta.threads.messages.create(thread.id, { role: \"user\", content: prompt });\n    const run = await openai.beta.threads.runs.create(thread.id, { assistant_id: assistantId });\n    let currentRun;\n    do {\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        currentRun = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n    } while (currentRun.status === 'in_progress' || currentRun.status === 'queued');\n    if (currentRun.status === 'completed') {\n        const messages = await openai.beta.threads.messages.list(thread.id);\n        const assistantResponse = messages.data[0].content[0].text.value;\n        return JSON.parse(assistantResponse);\n    } else {\n        throw new Error(`El Run del asistente fall\xf3 con el estado: ${currentRun.status}`);\n    }\n}\n\n/**\n * Env\xeda un correo electr\xf3nico a trav\xe9s de la API de Campaign Monitor.\n */\nasync function sendCampaignMonitorEmail(apiKey, clientId, fromName, fromEmail, recipientEmail, subject, htmlContent) {\n    const url = `https://api.createsend.com/api/v3.3/transactional/classicemail/send?clientID=${clientId}`;\n    const payload = {\n        From: `\"${fromName}\" <${fromEmail}>`,\n        To: [recipientEmail],\n        Subject: subject,\n        Html: htmlContent,\n        ConsentToTrack: \"Unchanged\"\n    };\n    const credentials = Buffer.from(`${apiKey}:x`).toString('base64');\n    const headers = { 'Authorization': `Basic ${credentials}`, 'Content-Type': 'application/json' };\n    await axios.post(url, payload, { headers });\n    console.log(`Correo din\xe1mico enviado a ${recipientEmail} exitosamente.`);\n}\n\n/**\n * Env\xeda un mensaje de WhatsApp usando una plantilla de Meta.\n */\nasync function sendWhatsAppMessage(token, phoneNumberId, recipientPhoneNumber, templateName, components) {\n    const url = `https://graph.facebook.com/v19.0/${phoneNumberId}/messages`;\n    const payload = {\n        messaging_product: \"whatsapp\",\n        to: recipientPhoneNumber,\n        type: \"template\",\n        template: {\n            name: templateName,\n            language: { code: \"es_CO\" },\n            components: components\n        }\n    };\n    const headers = { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' };\n    await axios.post(url, payload, { headers });\n    console.log(`Mensaje de WhatsApp enviado a ${recipientPhoneNumber} exitosamente.`);\n}\n\n/**\n * Reemplaza los placeholders de una plantilla (ej: {{1}}) con valores reales.\n */\nfunction renderTemplate(templateString, params) {\n    let message = templateString;\n    params.forEach((param, index) => {\n        const placeholder = new RegExp(`\\\\{\\\\{${index + 1}\\\\}\\\\}`, 'g');\n        message = message.replace(placeholder, param || '');\n    });\n    return message;\n}\n\n\n/**\n * Acorta un mensaje para que no exceda los 160 caracteres para un SMS.\n */\nasync function shortenForSms(message) {\n    const prompt = `Acorta el siguiente mensaje a menos de 160 caracteres para un SMS. S\xe9 conciso y mant\xe9n el link de pago si existe. Mensaje original: \"${message}\"`;\n    const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [{ role: \"user\", content: prompt }],\n    });\n    return response.choices[0].message.content;\n}\n\n/**\n * Env\xeda un registro de la acci\xf3n a la API de Billy.\n */\nasync function postToBilly(billyToken, payload) {\n    const url = '[https://damp-dawn-69908-08d523d79e5b.herokuapp.com/api/create-bulk-entries](https://damp-dawn-69908-08d523d79e5b.herokuapp.com/api/create-bulk-entries)';\n    await axios.post(url, payload, {\n        headers: { 'token': billyToken, 'Content-Type': 'application/json' }\n    });\n    console.log('Informaci\xf3n enviada a Billy exitosamente.');\n}\n\n/**\n * Construye el payload din\xe1mico para la API de registro de Billy.\n */\nfunction buildBillyPayload(channelName, invoiceData, taskConfig, message, amount) {\n    console.log(`Construyendo payload para Billy con el canal: ${channelName}`);\n    let channelId = 0;\n    let cmId = '';\n    switch (channelName.toUpperCase()) {\n        case 'EMAIL': case 'TEMPLATE': channelId = 1; cmId = 'email_msg'; break;\n        case 'SMS': channelId = 2; cmId = 'sms_msg'; break;\n        case 'WHATSAPP': channelId = 3; cmId = 'whatsapp_msg'; break;\n    }\n\n    let etapa = 1;\n    const etapaActual = invoiceData.Etapa_actual?.toUpperCase();\n    if (etapaActual === \"JURIDICA\") etapa = 2;\n    else if (etapaActual === \"EXTRAJURIDICA\") etapa = 3;\n\n    const formatDate = (dateString) => {\n        if (!dateString) return new Date().toISOString().split('T')[0];\n        return new Date(dateString).toISOString().split('T')[0];\n    };\n\n    return {\n        clients: [{\n            name: invoiceData.Raz\xf3n_social_cliente,\n            email: invoiceData.email_Cliente?.toLowerCase() || '',\n            billy_user: taskConfig.billy_user\n        }],\n        invoices: [{\n            number: invoiceData['No._Factura'] || String(invoiceData.__ROW_NUMBER__),\n            due_date: formatDate(invoiceData.Fecha_de_vencimiento),\n            etapa: etapa,\n            days_outstanding: parseInt(invoiceData.D\xedas_en_Mora, 10) || 0,\n            amount: String(amount),\n            message: message || \"\"\n        }],\n        records: [{\n            billy_user: parseInt(taskConfig.billy_user, 10),\n            channel: channelId,\n            date: new Date().toISOString().split('T')[0],\n            cm_id: cmId\n        }]\n    };\n}\n\n// --- Funci\xf3n Principal ---\n\nfunctions.http('processAndSendMessage', async (req, res) => {\n    const { invoiceData, taskConfig } = req.body;\n    const ASSISTANT_ID = 'asst_56YtrqC8wtBXx7lZMl6aMyK2';\n    const SENDER_EMAIL = 'no-reply@cobrosautomaticos.com';\n    const CAMPAIGN_MONITOR_CLIENT_ID = '254000907423a7e16351ee3ac9d373ef';\n    const WHATSAPP_PHONE_NUMBER_ID_DEFAULT = '506361355901323';\n    const WHATSAPP_PHONE_NUMBER_ID_SOS = '526134037258358';\n\n    if (!(parseInt(invoiceData.D\xedas_en_Mora, 10) > 0 || invoiceData.Monto)) {\n        console.log(`Factura ${invoiceData['No._Factura']} omitida por filtro.`);\n        return res.status(200).send({ status: 'skipped', reason: 'Filter not met' });\n    }\n\n    try {\n        const apiKeys = await getApiKeys();\n        const prompt = buildPrompt(invoiceData, taskConfig);\n        const gptResponse = await callAssistant(prompt, ASSISTANT_ID);\n        const { type, subject, msg, amount, tone } = gptResponse;\n        \n        let billyPayload = {};\n\n        switch (type.toUpperCase()) {\n            case 'EMAIL':\n            case 'TEMPLATE': {\n                const senderName = taskConfig.razon_social || \"Tu Empresa\";\n                let htmlToSend;\n\n                if (type.toUpperCase() === 'EMAIL') {\n                    htmlToSend = msg;\n                } else {\n                    htmlToSend = taskConfig.tonos.con_plantilla.html_content;\n                    if (!htmlToSend) throw new Error(\"No se encontr\xf3 el contenido HTML de la plantilla en taskConfig.\");\n                }\n                const recipientEmail = taskConfig.isTest ? taskConfig.test_email : invoiceData.email_Cliente;\n                await sendCampaignMonitorEmail(apiKeys.campaignKey, CAMPAIGN_MONITOR_CLIENT_ID, senderName, SENDER_EMAIL, recipientEmail, subject, htmlToSend);\n                billyPayload = buildBillyPayload(type, invoiceData, taskConfig, null, amount);\n                break;\n            }\n            case 'SMS': {\n                const shortMessage = await shortenForSms(msg);\n                const countryCode = invoiceData.Indicativo_Cel_Cliente || '57';\n                const phone = taskConfig.isTest ? taskConfig.test_phone : invoiceData.Cel_Cliente;\n                const smsUrl = `https://api.sms.to/sms/send?api_key=${apiKeys.smsKey}&to=+${countryCode}${phone}&message=${encodeURIComponent(shortMessage)}&sender_id=oblicua`;\n                await axios.post(smsUrl);\n                billyPayload = buildBillyPayload(type, invoiceData, taskConfig, shortMessage, amount);\n                break;\n            }\n            case 'WHATSAPP': {\n                if (!invoiceData.Cel_Cliente) {\n                    return res.status(200).send({ status: 'skipped', reason: 'No WhatsApp number' });\n                }\n                console.log(`Enviando por WhatsApp con tono: ${tone}`);\n                let templateName, templateToRender, components, paramsForBilly;\n                let tokenToSend, phoneIdToSend;\n                const emailDestino = taskConfig.isTest ? taskConfig.test_email : invoiceData.email_Cliente;\n                const telefonoDestino = taskConfig.isTest ? taskConfig.test_phone : invoiceData.Cel_Cliente;\n\n                if (String(taskConfig.billy_user) === '20') {\n                    console.log('Usando configuraci\xf3n especial para SOS Jur\xeddico (usuario 20)...');\n                    tokenToSend = apiKeys.whatsappSosToken;\n                    phoneIdToSend = WHATSAPP_PHONE_NUMBER_ID_SOS;\n                    // Se usa el nombre de la plantilla de SOS Jur\xeddico\n                    templateName = 'amistoso';\n                    templateToRender = apiKeys.whatsappTemplateSos;\n                    const cobradorFinal = invoiceData.Cobrador_si_Grupo_Oblicua_SAS_no_es_el_cobrador_final || taskConfig.razon_social;\n                    paramsForBilly = [invoiceData.Raz\xf3n_social_cliente, cobradorFinal];\n                    components = [{ type: \"header\", parameters: [{ type: \"text\", text: \"\xa1Mensaje importante de SOS Jur\xeddico!\" }] }, { type: \"body\", parameters: paramsForBilly.map(p => ({ type: \"text\", text: p })) }];\n                } else {\n                    console.log('Usando configuraci\xf3n de WhatsApp principal...');\n                    tokenToSend = apiKeys.whatsappToken;\n                    phoneIdToSend = WHATSAPP_PHONE_NUMBER_ID_DEFAULT;\n                    const cleanTone = tone.toLowerCase();\n                    if (cleanTone === 'exigente') {\n                        templateName = 'exigente';\n                        templateToRender = apiKeys.whatsappTemplateExigente;\n                        paramsForBilly = [invoiceData['No._Factura'], taskConfig.razon_social, String(invoiceData.Monto), emailDestino, telefonoDestino];\n                        components = [{ type: \"header\", parameters: [{ type: \"text\", text: \"NO VEMOS REFLEJADO SU PAGO\" }] }, { type: \"body\", parameters: paramsForBilly.map(p => ({ type: \"text\", text: p })) }];\n                    } else if (cleanTone === 'formal') {\n                        templateName = 'formal';\n                        templateToRender = apiKeys.whatsappTemplateFormal;\n                        paramsForBilly = [invoiceData.Raz\xf3n_social_cliente, invoiceData['No._Factura'], taskConfig.razon_social, telefonoDestino, emailDestino];\n                        components = [{ type: \"header\", parameters: [{ type: \"text\", text: `\xa1Mensaje importante de ${taskConfig.razon_social}!` }] }, { type: \"body\", parameters: paramsForBilly.map(p => ({ type: \"text\", text: p })) }];\n                    } else if (cleanTone === 'amigable' || cleanTone === 'amistoso') {\n                        templateName = 'amistoso';\n                        templateToRender = apiKeys.whatsappTemplateAmistoso;\n                        paramsForBilly = [msg, telefonoDestino, emailDestino];\n                        components = [{ type: \"body\", parameters: paramsForBilly.map(p => ({ type: \"text\", text: p })) }];\n                    } else {\n                        throw new Error(`Tono de WhatsApp no reconocido: ${tone}`);\n                    }\n                }\n                const countryCode = invoiceData.Indicativo_Cel_Cliente || '57';\n                const phone = taskConfig.isTest ? taskConfig.test_whatsapp : invoiceData.Cel_Cliente;\n                const fullPhoneNumber = `${countryCode}${phone}`;\n                await sendWhatsAppMessage(tokenToSend, phoneIdToSend, fullPhoneNumber, templateName, components);\n                const messageToSendToBilly = renderTemplate(templateToRender, paramsForBilly);\n                billyPayload = buildBillyPayload('WHATSAPP', invoiceData, taskConfig, messageToSendToBilly, amount);\n                break;\n            }\n            default:\n                console.log(`Tipo de mensaje desconocido: ${type}`);\n                return res.status(200).send({ status: 'skipped', reason: 'Unknown message type' });\n        }\n        if (!taskConfig.isTest && Object.keys(billyPayload).length > 0) {\n            await postToBilly(apiKeys.billyToken, billyPayload);\n        }\n        res.status(200).send({ status: 'success', channel: type });\n    } catch (error) {\n        console.error('Error en processAndSendMessage:', error.response ? error.response.data : error.message);\n        res.status(500).send('Error interno al procesar la factura.');\n    }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-esquema-de-salida-de-openai-referencia",children:"4. Esquema de Salida de OpenAI (Referencia)"}),"\n",(0,s.jsx)(n.p,{children:"Para que la l\xf3gica de env\xedo pueda determinar el canal y el contenido, la respuesta del Asistente de OpenAI debe seguir un esquema JSON estricto."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Output del Asistente de OpenAI"',children:'{\n    "type": "EMAIL" | "SMS" | "WHATSAPP" | "TEMPLATE",\n    "subject": "Asunto del correo",\n    "msg": "El mensaje de cobranza generado por la IA",\n    "amount": 125000.50 \n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var t=a(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);